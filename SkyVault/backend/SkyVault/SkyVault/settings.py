"""
Django settings for SkyVault project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""


from pathlib import Path
import os
from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', False)

ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', '').split(',')

CSRF_TRUSTED_ORIGINS = [
    "http://127.0.0.1:3000",
    # Добавьте ваш продакшн-домен здесь
]

CORS_ALLOWED_ORIGINS = [
    "http://127.0.0.1:3000",
]

#CORS_ORIGIN_WHITELIST = [
#   'http://localhost:3000',  # URL вашего фронтенда
#]

CORS_ALLOW_METHODS = [
    "GET",
    "POST",
    "PUT",
    "PATCH",
    "DELETE",
    "OPTIONS"
]

# Разрешённые заголовки
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

CORS_ALLOW_CREDENTIALS = True  # Разрешаем передачу cookie
CSRF_COOKIE_NAME = "csrftoken"  # Имя cookie для CSRF, совпадает с тем, что используется во фронте
CSRF_COOKIE_HTTPONLY = False  # Разрешаем JavaScript доступ к CSRF-токену
CSRF_COOKIE_SAMESITE = 'Lax'  # Для локальной разработки
CSRF_COOKIE_SECURE = True  # Для локальной разработки (в продакшене True)
SESSION_COOKIE_SAMESITE = 'Lax'  # Для локальной разработки
SESSION_COOKIE_HTTPONLY = True  # Запрещает доступ к куки через JavaScript
SESSION_COOKIE_SECURE = True  # Для локальной разработки (в продакшене True)
#CSRF_CHECK = False


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",


    "SkyVault",
    "api",
    "vault",
    'users.apps.UsersConfig',

    # Django REST Framework
    "rest_framework",

    'corsheaders',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = "SkyVault.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "front" ],
        "APP_DIRS": True,
        "OPTIONS": {
            'string_if_invalid': 'INVALID_TEMPLATE',
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]




WSGI_APPLICATION = "SkyVault.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': os.getenv('ENGINE'),
        'NAME': os.getenv('NAME'),
        'HOST': os.getenv('HOST'),
        'PORT': os.getenv('PORT'),
        'USER': os.getenv('USER_PSQL'),
        'PASSWORD': os.getenv('PASSWORD_PSQL'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'ru'

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

AUTH_USER_MODEL = 'users.User'

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',  # Включаем сессии
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',  # Требуется аутентификация по умолчанию
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',  # Для обработки JSON
        'rest_framework.parsers.MultiPartParser',  # Для обработки файлов
        'rest_framework.parsers.FormParser',  # Для обработки форм
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',  # Только JSON-ответы
    ],
}


STATIC_URL = '/static/'
STATICFILES_DIRS = [
    BASE_DIR / "front",
    BASE_DIR / "front" / "static",
    BASE_DIR / "front" / "img",
]
STATIC_ROOT = BASE_DIR / "staticfiles"  # Папка для собранных статических файлов


CACHES ={
    'default': {
        "BACKEND": 'django.core.cache.backends.dummy.DummyCache',
    }
}